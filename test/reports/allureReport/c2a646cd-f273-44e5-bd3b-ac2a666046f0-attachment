# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: API : Users >> Users Schema Validation
- Location: C:\Users\Drew\Documents\VScode-workspace\playwright-infrastructure\test\api\tests\users.spec.ts:10:5

# Error details

```
Error: expect(received).toBeTruthy()

Received: false
    at C:\Users\Drew\Documents\VScode-workspace\playwright-infrastructure\test\api\tests\users.spec.ts:29:42
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { usersSchema } from '../schema/usersSchema';
   3 | import { Ajv } from 'ajv';
   4 |
   5 | test.describe.parallel("API : Users", () => {
   6 |     const baseURL = "https://reqres.in";
   7 |
   8 |
   9 |
   10 |     test("Users Schema Validation", async ({ request }) => {
   11 |         const response = await request.get(`${baseURL}/api/users`);
   12 |
   13 |         expect(response.status()).toBe(200);
   14 |
   15 |         const responseBody = JSON.parse(await response.text());
   16 |
   17 |         console.log(responseBody);
   18 |
   19 |         const schema = usersSchema;
   20 |
   21 |         console.log(schema);
   22 |
   23 |         const ajv = new Ajv();
   24 |
   25 |         const ajvCompile = ajv.compile(schema);
   26 |
   27 |         console.log("ajv result : " + ajvCompile(responseBody));
   28 |
>  29 |         expect(ajvCompile(responseBody)).toBeTruthy();
      |                                          ^ Error: expect(received).toBeTruthy()
   30 |
   31 |     });
   32 |
   33 |
   34 |     test("Get User Two", async ({ request }) => {
   35 |         const response = await request.get(`${baseURL}/api/users/2`);
   36 |
   37 |         expect(response.status()).toBe(200);
   38 |
   39 |         const responseBody = JSON.parse(await response.text());
   40 |
   41 |         //console.log(responseBody);
   42 |
   43 |         expect(responseBody.data.id).toBe(2);
   44 |         expect(responseBody.data.first_name).toBe("Janet");
   45 |         expect(responseBody.data.last_name).toBe("Weaver");
   46 |
   47 |         expect(responseBody.support.url).toContain("contentcaddy");
   48 |     });
   49 |     
   50 |
   51 |     test("User Not Found", async ({ request }) => {
   52 |         const response = await request.get(`${baseURL}/api/users/23`);
   53 |
   54 |         expect(response.status()).toBe(404);
   55 |     });
   56 |
   57 |
   58 |     test("Create User", async ({ request }) => {
   59 |         const response = await request.post(`${baseURL}/api/users`, {
   60 |             data: {
   61 |                 name: "Mike", 
   62 |                 job: "QA Engineer"
   63 |             }
   64 |         });
   65 |
   66 |         expect(response.status()).toBe(201);
   67 |
   68 |         const responseBody = JSON.parse(await response.text());
   69 |
   70 |         //console.log(responseBody);
   71 |
   72 |         expect(responseBody.name).toBe("Mike");
   73 |         expect(responseBody.job).toBe("QA Engineer");
   74 |         expect(responseBody.id).toBeTruthy();
   75 |         expect(responseBody.createdAt).toBeTruthy();
   76 |     });
   77 |
   78 |     test("Update User Name", async ({ request }) => {
   79 |         const response = await request.put(`${baseURL}/api/users/3`, {
   80 |             data: {
   81 |                 name: "Ralph"     
   82 |             }
   83 |         });
   84 |
   85 |         expect(response.status()).toBe(200);
   86 |
   87 |         const responseBody = JSON.parse(await response.text());
   88 |
   89 |         //console.log(responseBody);
   90 |
   91 |         expect(responseBody.name).toBe("Ralph");
   92 |         expect(responseBody.updatedAt).toBeTruthy();
   93 |     });
   94 |
   95 |
   96 |     test("Update User Job", async ({ request }) => {
   97 |         const response = await request.put(`${baseURL}/api/users/3`, {
   98 |             data: {
   99 |                 job: "QA Automation Engineer"      
  100 |             }
  101 |         });
  102 |
  103 |         expect(response.status()).toBe(200);
  104 |
  105 |         const responseBody = JSON.parse(await response.text());
  106 |
  107 |         //console.log(responseBody);
  108 |
  109 |         expect(responseBody.job).toBe("QA Automation Engineer");
  110 |         expect(responseBody.updatedAt).toBeTruthy();
  111 |     });
  112 |
  113 |
  114 |     test("Delete User", async ({ request }) => {
  115 |         const response = await request.delete(`${baseURL}/api/users/5`);
  116 |
  117 |         expect(response.status()).toBe(204);
  118 |     });
  119 |
  120 | });
```