# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: API : Users >> Update User Name
- Location: C:\Users\Drew\Documents\VScode-workspace\playwright-infrastructure\test\api\tests\users.spec.ts:50:5

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 404
    at C:\Users\Drew\Documents\VScode-workspace\playwright-infrastructure\test\api\tests\users.spec.ts:57:35
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test.describe.parallel("API : Users", () => {
   4 |     const baseURL = "https://reqres.in";
   5 |
   6 |     test("Get User Two", async ({ request }) => {
   7 |         const response = await request.get(`${baseURL}/api/users/2`);
   8 |
   9 |         expect(response.status()).toBe(200);
  10 |
  11 |         const responseBody = JSON.parse(await response.text());
  12 |
  13 |         //console.log(responseBody);
  14 |
  15 |         expect(responseBody.data.id).toBe(2);
  16 |         expect(responseBody.data.first_name).toBe("Janet");
  17 |         expect(responseBody.data.last_name).toBe("Weaver");
  18 |
  19 |         expect(responseBody.support.url).toContain("contentcaddy");
  20 |     });
  21 |     
  22 |
  23 |     test("User Not Found", async ({ request }) => {
  24 |         const response = await request.get(`${baseURL}/api/users/23`);
  25 |
  26 |         expect(response.status()).toBe(404);
  27 |     });
  28 |
  29 |
  30 |     test("Create User", async ({ request }) => {
  31 |         const response = await request.post(`${baseURL}/api/users`, {
  32 |             data: {
  33 |                 name: "Mike", 
  34 |                 job: "QA Engineer"
  35 |             }
  36 |         });
  37 |
  38 |         expect(response.status()).toBe(201);
  39 |
  40 |         const responseBody = JSON.parse(await response.text());
  41 |
  42 |         console.log(responseBody);
  43 |
  44 |         expect(responseBody.name).toBe("Mike");
  45 |         expect(responseBody.job).toBe("QA Engineer");
  46 |         expect(responseBody.id).toBeTruthy();
  47 |         expect(responseBody.createdAt).toBeTruthy();
  48 |     });
  49 |
  50 |     test("Update User Name", async ({ request }) => {
  51 |         const response = await request.put(`${baseURL}/api/users`, {
  52 |             data: {
  53 |                 name: "Ralph"     
  54 |             }
  55 |         });
  56 |
> 57 |         expect(response.status()).toBe(200);
     |                                   ^ Error: expect(received).toBe(expected) // Object.is equality
  58 |
  59 |         const responseBody = JSON.parse(await response.text());
  60 |
  61 |         console.log(responseBody);
  62 |
  63 |
  64 |     });
  65 |
  66 |     test("Update User Job", async ({ request }) => {
  67 |         const response = await request.put(`${baseURL}/api/users`, {
  68 |             data: {
  69 |                 job: "QA Automation Engineer"      
  70 |             }
  71 |         });
  72 |
  73 |         expect(response.status()).toBe(200);
  74 |
  75 |         const responseBody = JSON.parse(await response.text());
  76 |
  77 |         console.log(responseBody);
  78 |
  79 |     });
  80 | });
```